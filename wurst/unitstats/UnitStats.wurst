package UnitStats

import HashMap
import StatType
import ErrorHandling
import UnitTypeStats
import LinkedList
import OnUnitEnterLeave

public function unit.getStatInstance(StatType stat) returns UnitStat
    return UnitStats.getInstance(this).getStat(stat)

public function unit.getStat(StatType stat) returns real
    return UnitStats.getInstance(this).getStat(stat).getAdjustedValue()

public function unit.setStatBase(StatType stat, real value)
    let instance = UnitStats.getInstance(this)
    if( instance != null )
        instance.getStat(stat).setBase(value)

public function unit.adjustStatFlat(StatType stat, real adjustment)
    let instance = UnitStats.getInstance(this)
    if( instance != null )
        instance.getStat(stat).adjustFlat(adjustment)

public function unit.adjustStatPercentage(StatType stat, real adjustment)
    let instance = UnitStats.getInstance(this)
    if( instance != null )
        instance.getStat(stat).adjustPercentage(adjustment)
    

public interface UnitStatCallback
    function run(unit u)

/**
    Add a callback which will be run after a unit has entered the map and
    it has been registered with the stat system */
public function afterUnitStatsRegistered(UnitStatCallback callback)
    UnitStats.afterUnitRegisteredListeners.add(callback)

/**
    Add a callback which will be run before a unit leaves the map, and it will
    be deregistered from the stat system */
public function beforeUnitStatsDeregistered(UnitStatCallback callback)
    UnitStats.beforeUnitDeregisteredListeners.add(callback)

public class UnitStats
    
    protected static let afterUnitRegisteredListeners = new LinkedList<UnitStatCallback>
    protected static let beforeUnitDeregisteredListeners = new LinkedList<UnitStatCallback>
    protected static let instances = new IterableMap<unit, thistype>

    private let stats = new IterableMap<StatType, UnitStat>
    private unit statUnit
    
    construct(unit statUnit)
        instances.put(statUnit, this)

        this.statUnit = statUnit
        for statType in StatType.getAllTypes()
            stats.put( statType, new UnitStat(statUnit, statType))

        let unitTypeStats = statUnit.getTypeId().getUnitTypeStats()
        if( unitTypeStats != null )
            for statType in unitTypeStats
                stats.get(statType).setBase(unitTypeStats.get(statType))
            
        for callback in afterUnitRegisteredListeners
            callback.run(statUnit)

    ondestroy
        for listener in beforeUnitDeregisteredListeners
            listener.run(statUnit)
        for key in stats
            destroy stats.get(key)
        destroy stats
        if( statUnit == null )
            Log.warn("LakeStatSystem: Destroyed UnitStat instance, but unit was null")
        else
            instances.remove(statUnit)

    static function getInstance(unit u) returns thistype
        if( not instances.has(u) )
            Log.warn("LakeStatSystem: Unit {0} didn't have a UnitStats instance.".format(u.getName()))
            return new UnitStats(u)
        return instances.get(u)
        
    function getStat(StatType statType) returns UnitStat
        let loadedStat = stats.get(statType)
        if( loadedStat == null )
            error("Loaded stat '{0}' was null for unit '{1}'".format(statType.getName(), statUnit.getName() ))
        return loadedStat
        

public class UnitStat
    private StatType statType
    private unit u

    private real baseValue = 0
    private real adjustmentFlat = 0
    private real adjustmentPercentage = 1


    construct(unit u, StatType statType)
        this.u = u
        this.statType = statType
        baseValue = statType.getUnitDefault(u)

    function updateUnit()
        if( u != null )
            statType.updateUnit(u, getAdjustedValue() )

    function getAdjustedValue() returns real
        var value = (baseValue+adjustmentFlat) * adjustmentPercentage
        return statType.correctValue(value)

    function getBaseValue() returns real
        return baseValue

    function getAdjustmentFlat() returns real
        return adjustmentFlat

    function getAdjustmentPercentage() returns real
        return adjustmentPercentage

    function setBase(real baseValue)
        this.baseValue = baseValue
        updateUnit()
    
    function adjustFlat(real adjustment)
        adjustmentFlat += adjustment
        updateUnit()

    function adjustPercentage(real adjustment)
        adjustmentPercentage += adjustment
        updateUnit()

    function toString() returns string
        return "{0}: {1}    [ ({2}+{3})*{4} ]".format(
            statType.getName(),
            statType.valueToString(getAdjustedValue()),
            statType.valueToString(getBaseValue()),
            statType.valueToString(getAdjustmentFlat()),
            adjustmentPercentage.toString(2)
        )
            

init       
    onEnter() ->
        let u = getEnterLeaveUnit()
        if( UnitStats.instances.has(u) )
            Log.warn(
                "LakeStatSystem: Entering unit, {0}, already has a UnitStat instance".format(u.getName()))
        else
            new UnitStats(u)

    onLeave() ->
        let u = getEnterLeaveUnit()
        let instance = UnitStats.instances.get(u)
        if( instance == null  )
            Log.warn(
                "LakeStatSystem: Leaving unit, {0}, didn't have a UnitStat instance".format(u.getName()))
        else
            destroy UnitStats.instances.get(u)
        
        

// =================================================================================================
// Unit Testing

@Test
function testPercentageDetermniation()
    
    let errorThreshold = 0.0001

    let baseValue = 20.
    let adjustmentBase = 0.003

    // Setup
    let statType = new StatType("Test Stat", u -> baseValue, null )

    let stat = new UnitStat(null, statType)

    //Testing initial values
    stat.getBaseValue().assertEquals(baseValue)
    stat.getAdjustmentFlat().assertEquals(0)
    stat.getAdjustmentPercentage().assertEquals(1)
    stat.getAdjustedValue().assertEquals(baseValue)

    for i=1 to 1000
        for j=0 to 100
            let adjustment = adjustmentBase * j
            stat.adjustPercentage(adjustment)
            stat.adjustPercentage(-adjustment)
        for j=0 to 100
            let adjustment = adjustmentBase * (100-j)
            stat.adjustPercentage(adjustment)
            stat.adjustPercentage(-adjustment)
        
    let difference = (baseValue - stat.getAdjustedValue()).abs()
    difference.assertLessThan(errorThreshold)        


//     function adjustDamagePerc( real adjustment)
//         /* Adjusting the adjustment (lol) such that it only counts in the 1 decimal
//             of the percentage (2.55 - > 2.5) i.e.
//             It rounds to the closest int (VERY IMPORTANT!). */
//         let actualAdjustment = (adjustment * 1000).round()
//         damagePerc += actualAdjustment
//         update()